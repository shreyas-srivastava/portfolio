{"ast":null,"code":"import _slicedToArray from \"C:/Users/shrey/OneDrive/Desktop/portfolio Website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/shrey/OneDrive/Desktop/portfolio Website/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/shrey/OneDrive/Desktop/portfolio Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/shrey/OneDrive/Desktop/portfolio Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particle_engine;\n\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\n\nvar fixOutMode = function fixOutMode(data) {\n  if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\n\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n\n    _Particle_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.ignoresResizeRatio = true;\n    var pxRatio = container.retina.pixelRatio;\n    var mainOptions = container.actualOptions;\n    var particlesOptions = new ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    var zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    var sizeOptions = this.options.size,\n        sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getValue(sizeOptions) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    var sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    var gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector.origin;\n    var particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      var spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      var spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      var pos = this.getPosition();\n      var distance = getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n\n    var _iterator = _createForOfIteratorHelper(container.particles.updaters),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var updater = _step.value;\n\n        if (updater.init) {\n          updater.init(this);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    var _iterator2 = _createForOfIteratorHelper(container.plugins),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n\n        if (plugin.particleCreated) {\n          plugin.particleCreated(this);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  _createClass(Particle, [{\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius();\n      var canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              plugin = _step3$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a, _b;\n\n      var color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n      if (color && this.roll && (this.backColor || this.roll.alter)) {\n        var backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n            backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          }\n\n          if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n          }\n        }\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      if (this.unbreakable) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = this.options.destroy;\n\n      if (destroyOptions.mode === \"split\") {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.opacity) {\n        this.opacity.loops = 0;\n      }\n\n      this.size.loops = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n\n      var rate = getRangeValue(splitOptions.rate.value);\n\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      var _iterator5 = _createForOfIteratorHelper(container.plugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              plugin = _step5$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var canvasSize = container.canvas.size;\n      var pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n      var radius = this.getRadius();\n\n      var outModes = this.options.move.outModes,\n          fixHorizontal = function fixHorizontal(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: function setCb(value) {\n            return pos.x += value;\n          },\n          radius: radius\n        });\n      },\n          fixVertical = function fixVertical(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: function setCb(value) {\n            return pos.y += value;\n          },\n          radius: radius\n        });\n      };\n\n      fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n      fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n      fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n      fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions;\n      var radius = this.getRadius();\n\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n\n      var overlapOptions = collisionsOptions.overlap;\n\n      if (overlapOptions.enable) {\n        return false;\n      }\n\n      var retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      var overlaps = false;\n\n      var _iterator6 = _createForOfIteratorHelper(this.container.particles.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var particle = _step6.value;\n\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return overlaps;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move,\n          rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadShapeData\",\n    value: function loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n  }, {\n    key: \"loadLife\",\n    value: function loadLife() {\n      var container = this.container;\n      var particlesOptions = this.options;\n      var lifeOptions = particlesOptions.life;\n      var life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n\n      if (life.duration <= 0) {\n        life.duration = -1;\n      }\n\n      if (life.count <= 0) {\n        life.count = -1;\n      }\n\n      return life;\n    }\n  }]);\n\n  return Particle;\n}();\n_Particle_engine = new WeakMap();","map":{"version":3,"sources":["C:/Users/shrey/OneDrive/Desktop/portfolio Website/node_modules/tsparticles/esm/Core/Particle.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","Vector","Vector3d","alterHsl","clamp","colorToRgb","deepExtend","getDistance","getHslFromAnimation","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","isInArray","itemFromArray","randomInRange","setRangeValue","ParticlesOptions","Shape","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","gravityOptions","gravity","acceleration","inverse","calcPosition","zLayers","initialPosition","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","center","angle","spinAcceleration","shadowColor","shadow","color","updaters","updater","init","particleInit","plugin","particleCreated","isInsideCanvas","getRadius","canvasSize","delta","drawParticlePlugin","drawParticle","PI","roll","backColor","alter","backFactor","mode","backSum","rolled","floor","strokeColor","getFillColor","override","particleDestroyed","destroyOptions","destroy","split","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","create","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","length","lifeOptions","delayTime","duration","time","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue, } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nconst fixOutMode = (data) => {\n    if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getValue(sizeOptions) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const gravityOptions = this.options.move.gravity;\n        this.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.options.roll.mode === \"both\" ? 2 : 1, backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move, rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}